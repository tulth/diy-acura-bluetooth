#!/bin/env python
from __future__ import print_function
import sys
import os
import time
from .. import mbusTime

class ToggleElement(object):

    def __init__(self, mbusTimeFormat="microsHex"):
        self.time = mbusTime.MbusTime(val=0, mbusTimeFormat=mbusTimeFormat)
        self.val = None

    def fromStr(self, argStr):
        timeStr, valStr = argStr.split(" ")
        remainder = self.time.fromStr(argStr)
        self.val = bool(int(remainder))

    def fromTuple(self, timeInUs, val):
        self.time.fromInt(timeInUs)
        self.val = bool(int(valStr))

    def __str__(self):
        return "{} {}".format(self.time, int(self.val))

    def toVcdEntry(self, waveId):
        resultList = []
        resultList.append("#{}\n".format(self.time))
        resultList.append("{}{}\n".format(int(self.val), waveId))
        return "".join(resultList)


def fromStr_ToggleElement(argStr, mbusTimeFormat="microsHex"):
    togElem = ToggleElement(mbusTimeFormat)
    togElem.fromStr(argStr)
    return togElem


def fromTimeVal_ToggleElement(timeInUs, val, mbusTimeFormat="microsHex"):
    togElem = ToggleElement(mbusTimeFormat)
    togElem.fromTimeVal(timeInUs)
    return togElem


class ToggleList(list):

    def __init__(self, mbusTimeFormat="microsHex"):
        super().__init__()
        self.mbusTimeFormat = mbusTimeFormat

    def updateMbusTimeFormat(self, mbusTimeFormat):
        self.mbusTimeFormat = mbusTimeFormat
        for toggle in self:
            toggle.time.setMbusTimeFormat(mbusTimeFormat)

    def fromFileName(self, fileName):
        with open(fileName, 'r') as fileHandle:
            self.fromFileHandle(fileHandle)

    def readLineFromFileHandle(self, fileHandle):
        line = None
        fileReadDone = False
        if fileHandle.tell() == os.fstat(fileHandle.fileno()).st_size:
            fileReadDone = True
        else:
            charList = [fileHandle.read(1)]
            while charList[-1] != '\n':
                if fileHandle.tell() == os.fstat(fileHandle.fileno()).st_size:
                    fileReadDone = True
                    break
                charList.append(fileHandle.read(1))
            line = "".join(charList)
        return line, fileReadDone

    def fromFileHandle(self, fileHandle):
        fileReadDone = False
        while not(fileReadDone):
            line, fileReadDone = self.readLineFromFileHandle(fileHandle)
            if line is not None:
                line = line.rstrip()
                self.append(fromStr_ToggleElement(line, self.mbusTimeFormat))

    def toFileName(self, fileName):
        with open(fileName, 'w') as fileHandle:
            self.toFileHandle(fileHandle)

    def toFileHandle(self, fileHandle):
        for togElem in self:
            fileHandle.write("{}\n".format(togElem))

    def toVcdFileName(self, fileName, waveId="$"):
        """if none, prints to stdout"""
        with (open(fileName, "w") if fileName is not None else sys.stdout) as fileHandle:
            self.toVcdFileHandle(fileHandle)

    def toVcdFileHandle(self, fileHandle, waveId="$"):
        self.updateMbusTimeFormat("microsInt")
        fileHandle.write("$date\n")
        fileHandle.write("   {}\n".format(time.strftime("%Y-%m-%d %H:%M")))
        fileHandle.write("$end\n")
        fileHandle.write("$version\n")
        fileHandle.write("   generated by {}\n".format(__file__))
        fileHandle.write("$end\n")
        fileHandle.write("$comment\n")
        fileHandle.write("   generated by {}\n".format(__file__))
        fileHandle.write("$end\n")
        fileHandle.write("$timescale 1us $end\n")
        fileHandle.write("$scope module logic $end\n")
        fileHandle.write("$var wire 1 {} mbus $end\n".format(waveId))
        fileHandle.write("$upscope $end\n")
        fileHandle.write("$enddefinitions $end\n")
        fileHandle.write("$dumpvars\n")
        fileHandle.write("x{}\n".format(waveId))
        fileHandle.write("$end\n")
        for togElem in self:
            fileHandle.write("{}".format(togElem.toVcdEntry(waveId=waveId)))

    def __str__(self):
        resultList = []
        for togElem in self:
            resultList.append(str(togElem))
        return "\n".join(resultList)

if __name__ == '__main__':
    print("library only!")
    sys.exit(1)
